
■  회귀분석

회귀분석은 하나의 변수가 나머지 다른 변수들과의 선형관계를 갖는가의 여부를 분석하는
방법으로 하나의 종속변수 ( 예측하고자 하는 값 ) 와 독립변수 사이의 관계를 명시하는 것을
말합니다.

예 : 집값에 가장 영향을 주는 요소가 무엇인가 ?

	- 독립 변수 : 종속변수에 영향을 주는 변수 ( 평수, 역세권, 학군 ,,, )
	- 종속 변수 : 서로 관계를 가지고 있는 변수들중에서 다른 변수에 영향을 받는 변수 ( 집값 )



모집단으로 하면 오차, 표본으로 하면 잔차
오차를 최소화할 수 있는 직선의 방정식을 알아내야한다 !!


■ 최소제곱 추정법 

최적의 a (기울기) 와 b (절편) 을 결정하기 위해서는 최소제곱으로 알려진 추정기법을 사용합니다.
실제값과 예측값 사이의 수직 직선인 오차 (잔차) 를 제곱해서 구한 총합을 알야아 합니다.

예제 1. 어느 실험실에서 10시간, 20, 30, 40 시간 마다 물질의 방사능 수치를 측정한 자료가 있을때,
	      35시간에 물질의 방사능 수치는 얼마로 예측되는가 ? ( x축 : 시간, y 축 : 방사능 수치 )
	
x = c(10,20,30,40)
y = c( 300, 250, 200, 150 )



a <- cov(x,y) / var(x)                   #  -5

# 절편 = y의 평균 - 기울기 * x의 평균 ( p 258 )

b <- mean(y) - ( a*mean(x) )            # 350

y = -5*x + 350        # 직선의 방정식

y = -5 * 35 + 350 = 175        # x = 35일때 y 값

### 위의 단순회귀 직선의 방정식을 구해서 y 값을 예측하는 함수를 다음과 같이 생성하시오!
			simple_regression(35)
			simple_regression <- function( x ) {
											코드작성
											print(결과값을 담은 변수명)
											}


simple_regression <- function( x_num ) {
								x = c(10,20,30,40)
								y = c(300, 250, 200, 150)
								a <- cov(x,y) / var(x)                          # p259 기울기
								b <- mean(y) - ( a*mean(x) )            # p258 절편
								y_val = a*x_num + b
								print(y_val)
								}

simple_regression(35)

### 탄닌 함유량과 애벌래의 성장간의 실험표를 이용해서 탄닌 함유량이 9일때 성장률이 어떻게
		  되는지 알아내는 함수를 다음과 같이 생성하시오 ! ( regression.txt )
			reg <- read.table('regression.txt', header = T)
			reg_func(9)

reg <- read.table('regression.txt', header = T)

reg_func <- function ( x_num ){
							x = reg$tannin
							y = reg$growth
							a <- cov(x,y) / var(x)
							b <- mean(y) - ( a*mean(x) ) 
							y_val = a*x_num + b
							print(y_val)
							}

reg_func(9)                     # 0.805555


### 위의 함수를 파이썬으로 !

import pandas as pd
import numpy as np
reg = pd.read_csv("c:\\data\\regression.txt", sep = '\t')

def reg_func(x_num):
    x = reg['tannin']
    y = reg['growth']
    a = x.cov(y) / x.var()                             # np.cov(x,y)[0,1] / x.var()
    b = np.mean(y) - ( a*np.mean(x) )
    y_val = a*x_num + b
    print(y_val)

reg_func(9)           # 0.8055555555555571

▩ R 함수 lm 을 이용해서 단순회귀분석 실습 1

"탄닌 함유량과 애벌래 성장간의 관계에 대한 회귀식을 도출하기"

# 1. 데이터를 로드합니다.
# 2. 데이터를 산포도 그래프로 시각화합니다.
# 3. 회귀분석을 해서 회귀계수인 기울기와 절편을 구합니다.
# 4. 2번에서 시각화한 산포도 그래프에 회귀직선을 겹처서 그립니다.
# 5. 그래프 제목을 회귀직선의 방정식으로 출력되게 합니다.


# 1. 데이터를 로드합니다.
reg <- read.table("regression.txt", header =T)

# 2. 데이터를 산포도 그래프로 시각화합니다.
attach(reg)
plot(growth ~ tannin, data = reg, pch = 21, col = 'blue', bg = 'blue')


※ 설명 : plot( y ~ x, data = 데이터프레임명 )

# 3. 회귀분석을 해서 회귀계수인 기울기와 절편을 구합니다.

model <- lm( growth ~ tannin, data = reg )
model

# 
Coefficients:
(Intercept)       tannin  
     11.756       -1.217  
	↑                  ↑
	절편             기울기   


# 4. 2번에서 시각화한 산포도 그래프에 회귀직선을 겹처서 그립니다.

attach(reg)
plot(growth ~ tannin, data = reg, pch = 21, col = 'blue', bg = 'blue')    # 산포도 그래프
model <- lm( growth ~ tannin, data = reg )                                               # 회귀 모델 생성
abline(model, col = 'red' )                                                                           # 회귀모델의 직선의 그래프



# 5. 그래프 제목을 회귀직선의 방정식으로 출력되게 합니다.

model$coefficients[2]            # 기울기
model$coefficients[1]            #  절편

title( paste( '성장률 =',model$coefficients[2], 'x  탄닌 + ', model$coefficients[1]  ) )



### 위의 단순회귀 직선 그래프 그리는 코드를 참고해서 광고비가 매출에 미치는 영향조사를 위한
		   회귀분석 그래프를 그리시오 ! ( simple_hg.csv / cost : 광고비 / input : 매출액)
		
# 1. 데이터를 로드합니다.
hg <- read.csv("simple_hg.csv", header = T)
head(hg)


# 2. 데이터를 산포도 그래프로 시각화합니다.
plot(hg$input ~ hg$cost, data = hg, pch = 21, col = 'blue', bg = 'blue')



# 3. 회귀분석을 해서 회귀계수인 기울기와 절편을 구합니다.

model <- lm(hg$input ~ hg$cost, data = hg)
model

#
Coefficients:
(Intercept)      hg$cost  
     62.929        2.186 

# 4. 2번에서 시각화한 산포도 그래프에 회귀직선을 겹처서 그립니다.

abline(model, col = 'red')


# 5. 그래프 제목을 회귀직선의 방정식으로 출력되게 합니다.

title( paste( '매출 =',model$coefficients[2], 'x  광고비 + ', model$coefficients[1]  ) )




# 6. 오차 그리는 코드

y_hat <- predict( model, cost = hg$cost )       #  input 매출액 예측값 출력 ( 직선 그래프의 값 )
y_hat                                                                    # 15개의 예측값 출력

join <- function(i){                      # join 이라는 이름의 함수 생성
				lines( c( hg$cost[i], hg$cost[i]), c( hg$input[i], y_hat[i] ), col = 'green' )     # 녹색라인그래프
				}

sapply(1:19, join)                # 1:19들을 join 함수에 적용하는 것 , 판다스의 apply나 map같은 느낌?




※ 오차와 잔차와의 차이 ?

	1. 오차 : 모집단에서 실제값이 회귀선과 비교했을때의 차이 ( 실제값과 예측값과의 차이 )
	2. 잔차 : 표본에서 실제값과 회귀선과 비교했을때의 차이 ( 실제값과 예측값과의 차이 )


### 책의 데이터 예제인 우주 왕복선 챌린저호의 폭파원인을 분석하기 위해서 x 축을 온도로 두고
		   y축을 o 형링 파손수로 두어서 산포도 그래프와 회귀 직선을 겹쳐서 그리시오 ! ( challenger.csv )
			데이터 소개 : distress_ct : o 형링 파손수
						  temperature : 온도
						  field_check_pressure : 압력
						  flight_num : 비행기 번호

chall <- read.csv("challenger.csv")
attach(chall)

model <- lm( distress_ct ~ temperature, data = chall )
plot( distress_ct ~ temperature, data = chall, pch = 21,col = 'blue', bg = 'blue' )
abline(model, col = 'red')

title( paste( 'o형링 파손수 =',round(model$coefficients[2],4), 'x  온도 + ', round(model$coefficients[1],4)  ) )




			단순회귀 --------------------> 상관관계 --------------------------> 다중회귀
										↓
									다중공선성
						

▩ 다중 공선성 ( variance inflation factor )

회귀분석에서 사용된 모형의 일부 설명변수 ( 독립변수 ) 가 다른 독립변수와의 상관정도가 높아
데이터 분석시 부정적인 영향을 미치는 현상을 말합니다.

두 독립변수들끼리 서로에게 영향을 주고 있다면 둘 중 하나의 영향력을 검증할 때
다른 하나의 영향력을 완전히 통제할 수 없게 됩니다.

예 : 아파트 가격, 평수, 역과의 거리
		↓                         ↓         
	종속변수                독립변수

	평수와 역과의 거리는 상관관계가 강하지 않아서 회귀분석 결과에 큰 영향을 미치지 않는다.

예 : 학업성취도, 일평균 음주량, 혈중 알코올 농도
		↓                         ↓         
	종속변수                독립변수

	음주가 학업성취도에 미치는 영향을 알아보려고 회귀분석을 하려고 한다.
	일평균 음주량과 혈중 알코올 농도는 서로 아주 강한 상관정도를 보인다.
	실제로 x1 과 x2의 값이 증가 또는 감소할수록 y 값이 증가 또는 감소할 것인데
	이중 하나는 굉장히 불안정한 계수값을 보이게 된다.
	
	공선성은 두개의 독립변수들 간의 관계를 의미하는데
	예를 들어, 두개의 독립변수들 간의 상관계수가 1이면 완전한 공선성을 보인다고 하고,
	계수가 0 이면 공선성이 없음을 의미합니다.
	특히 3개 이상의 변수들간의 관계를 다중 공선성이라한다.
	한 독립변수가 종속변수에 대한 설명력이 높더라도 ( 다중 ) 공선성이 높으면
	설명력이 낮은것 처럼 나타납니다.
	
	다중 공선성을 알아보기 위한 가장 간단한 방법은 독립변수들간의 상관관계를 조사하는것입니다.
	독립변수들 간의 높은 상관관계( 일반적으로 0.9 이상 )은 공선성을 판단하는 지표이다.
	공선성을 보다 엄격하게 점검하려면 팽창계수(vif) 를 확인하면 됩니다.
	
	현업기준 : 팽창계수(vif)가 보통 10보다 큰것을 골라내고
			     엄격하게 하려면 5보다 큰것을 골라냅니다.
			     느슨하게 하려면 15또는 20으로 주로 골라냅니다.

	
▩ 다중 공선성 확인 실습

install.packages("car")
library(car)

data( Boston, package = 'MASS' )
Boston

model <- lm(medv ~. , data = Boston)

vif(model)  > 10                # 다중 공선성을 보이는 변수들 확인 , 전부 False

*전부 false 여서 다중공선성을 보이는 컬럼들을 없습니다.
  집값에 영향을 미치는 독립변수들 중에서 서로 상관관계가 높게 나타나는 독립변수들이 없다는 의미입니다.

▩ 상관관계 데이터 분석 p 260

두 변수 간의 상관관계는 변수들의 관계가 직선에 가깝게 따르는 정도를 나타내는 숫자입니다.
상관관계는 -1 에서 +1 사이의 범위에 있습니다.

-1에 가깝거나 +1에 가까우면 완벽한 선형관계를 나타내는 반면, 0 에 가까운 상관관계는 선형관계가
없음을 나타냅니다.

https://cafe.daum.net/oracleoracle/ShOs/721





*p 260 피어슨 상관관계 구하는 공식 :

		두 변수의 공분산을 표준편차의 곱으로 나눈값으로 상관계수를 구합니다.
					
		
예제 1. 우주왕복선 챌린저호의 온도와 O형링 파손수간의 상관계수를 구하시오 !

cha <- read.csv("challenger.csv", header = True)

cor(cha$temperature, cha$distress_ct )              # [1] -0.5111264

※ 설명 : 피어슨 상관계수가 -0.51 이므로 음의 상관계수를 보이고 있습니다.
		온도와 오형링 손상관의 상대적인 강도가 -0.51 로 최대값인 -1 의 절반정도이기 때문에
		적당히 강한 음의 선형관계가 있음을 의미합니다.
		
문제 285. 챌린저호의 O형링 파손과 상관관계가 높은 컬럼은 아래의 3개중에 어떤것인지
		   확인하시오 !
		   1. 온도 , 2. 압력, 3. 비행기 번호 ( 비행기의 노후화와 연관이 있는 번호 )


cor(cha)

                                            distress_ct temperature field_check_pressure flight_num
distress_ct                         1.0000000 -0.51112639           0.28466627  0.1735779
temperature                     -0.5111264  1.00000000           0.03981769  0.2307702
field_check_pressure      0.2846663  0.03981769           1.00000000  0.8399324
flight_num                         0.1735779  0.23077017           0.83993237  1.0000000

문제 286. 위의 상관관계를 R로 시각화해서 출력하시오 !

install.packages("psych")
library(psych)
pairs.panels( cha )




※ 상관계수의 종류 2가지

	1. 피어슨 상관계수 : 등간척도나 비례척도의 데이터에서 두 변수의 공분산을 두 변수의
					   표준편차의 곱으로 나눈값입니다.
					
					   두 변수간의 선형관계의 크기를 측정하는 값으로 비선형적인
					   상관관계는 나타내지 못합니다.
					
	2. 스피어만 상관계수 : 두 변수간의 비선형적인관계도 나타낼 수 있는 값입니다.

						두 변수를 모두 순위로 변환시키고 두 순위 사이의 스피어만 상관계수를 구합니다.

### 삼성전자와 현대자동차 둘 중에 코스피 등락율과 더 상관관계가 높은 주식이 어떤것인지 알아내시오
			데이터 : K_index.csv, S_stock.csv, H_stock.csv
					코스피등락율, 삼성전자, 현대자동차

k <- read.csv("K_index.csv", stringsAsFactors = T)
s <- read.csv("S_stock.csv", stringsAsFactors = T)
h <- read.csv("H_stock.csv", stringsAsFactors = T)

k_s <- merge(k, s, by = 'date')
k_h <- merge(k, h, by = 'date')

cor(k_s$s_price, k_s$kospi)           #  0.7684845 , 코스피지수와  삼성 주가사이
cor(k_h$h_price, k_h$kospi)             # -0.4750208,  코스피지수와  현대 주가사이

# 선생님답
cor( na.omit(k$k_rate), na.omit(s$s_rate) )       # [1] 0.5142455
cor( na.omit(k$k_rate), na.omit(h$h_rate) )        # [1] 0.3262777

※ 설명 : 현대 자동차보다 삼성전자가 코스피 등락율과 더 높은 상관관계를 보입니다.
		na.omit 함수는 결측치를 제외시키는 함수입니다.
		
### 코스피 등락율과 삼성전자 수익율 등락율의 plot 그래프를 그리고 그 그래프에
		   회귀직선을 그으시오 !
		
k <- read.csv("K_index.csv", stringsAsFactors = T)
s <- read.csv("S_stock.csv", stringsAsFactors = T)
h <- read.csv("H_stock.csv", stringsAsFactors = T)

all_data <- merge(merge(k,s, by = 'date'),h, by = 'date')         # 3개의 테이블 조인
attach(all_data)
model <- lm( s_rate ~ k_rate , data = all_data )   # 종속변수 s_rate, 독립변수 k_rate로 회귀변수 도출 (순서상관 x)
plot( s_rate ~ k_rate, data = all_data, pch = 21, col = 'blue', bg ='blue' )    # x 축을 k_rate, y축을 s_rate 산포도그래프
abline(model, data = all_data)
title( paste( '삼성전자 등락율 =',round(model$coefficients[2],4), 'x  코스피 등락율 + ', round(model$coefficients[1],4)  ) )



### 위에 구한 기울기와 절편을 이용해서 위의 그래프의 제목을 회귀직선의 직선의 방정식으로
		   제목을 붙이시오 ~
		
title( paste( '삼성전자 등락율 =',round(model$coefficients[2],4), 'x  코스피 등락율 + ', round(model$coefficients[1],4)  ) )

#########################################################################################################################################

▩ 파이썬으로 단순회귀 분석 구현하기

	" 탄닌 함유량과 애벌래 성장간의 관계에 대한 회귀식을 도출하기"
	
# 1. 데이터를 로드합니다.
# 2. 종속변수와 독립변수를 지정합니다.
# 3. 모델을 설정합니다.
# 4. 모델을 훈련시킵니다.
# 5. 기울기와 절편을 구합니다.


# 1. 데이터를 로드합니다.

import pandas 
reg = pd.read_csv("c:\\data\\regression.txt", sep = '\t')

# 2. 종속변수와 독립변수를 지정합니다.

x = reg[['tannin']]         # 독립변수
y = reg[['growth']]        # 종속변수

# 3. 모델을 설정합니다.

from sklearn.linear_model import LinearRegression

model = LinearRegression()

# 4. 모델을 훈련시킵니다.

model.fit(x, y)

# 5. 기울기와 절편을 구합니다.

print('기울기 :', model.coef_ )
print('절편 :',model.intercept_ )

#
기울기 : [[-1.21666667]]
절편 : [11.75555556]
성장률 = -1.216*탄닌함유량 + 11.755

# 6. 탄닌 함유량이 9일 때의 성장률을 예측하시오

result = model.predict([[9]])    
print(result)                                  # [[0.80555556]]

# 7. 위의 회귀 직선을 시각화 하시오 !

y_hat = model.predict(x)               # 회귀직선에 넣고 예측한값

import matplotlib.pyplot as plt       # 그래프 그리기위한 모듈
import seaborn as sns

plt.figure( figsize = (10,5) )               # 그래프 사이즈 가로 10, 세로 5
ax1 = sns.distplot( y, hist = False, label = 'y', color = 'red' )          # 실제 값을 라인그래프로 시각화
ax2 = sns.distplot( y_hat, hist= False, label = 'y_hat', ax = ax1, color ='blue' )  # 예측값을 라인그래프로 시각화
plt.show()
plt.close()



*실제값과 예측값이 얼마나 일치하는지를 시각화한것

# 8. 훈련데이터를 얼마나 잘 설명하는지를 나타내는 지표인 결정계수값을 출력하시오 !
	( 1에 가까울 수록 데이터에 대한 설명력이 높습니다. )

r_square = model.score( x,y )
print(r_square)                           # 0.8156632653061224

### 키와 체중 데이터를 이용해서 단순 선형 회귀 모델을 생성하고
		   예측값과 실제값과의 일치성에 대한 시각화 그래프를 그리고 결정계수값을 출력
			독립변수 : 키  / 종속변수 : 체중

weight=[ 72, 72, 70, 43, 48, 54, 51, 52, 73, 45, 60, 62, 64, 47, 51, 74, 88,64, 56, 56  ]
tall = [ 176, 172, 182, 160, 163, 165, 168, 163, 182, 148, 170, 166, 172, 169, 163, 170, 182, 174, 164, 160 ] 

df = { 'weight' : [ 72, 72, 70, 43, 48, 54, 51, 52, 73, 45, 60, 62, 64, 47, 51, 74, 88,64, 56, 56 ],
'tall': [ 176, 172, 182, 160, 163, 165, 168, 163, 182, 148, 170, 166, 172, 169, 163, 170, 182, 174, 164, 160 ] }

df2 = pd.DataFrame(df)

x = df2[['tall']]         # 독립변수
y = df2[['weight']]        # 종속변수

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit( x, y )

print('기울기 :', model.coef_ )
print('절편 :',model.intercept_ )

#
기울기 : [[1.14602601]]
절편 : [-132.9480821]
키 = 1.146*몸무게 - 132.948

y_hat = model.predict(x)               # 회귀직선에 넣고 예측한값

import matplotlib.pyplot as plt       # 그래프 그리기위한 모듈
import seaborn as sns

plt.figure( figsize = (10,5) )               # 그래프 사이즈 가로 10, 세로 5
ax1 = sns.distplot( y, hist = False, label = 'y', color = 'red' )          # 실제 값을 라인그래프로 시각화
ax2 = sns.distplot( y_hat, hist= False, label = 'y_hat', ax = ax1, color ='blue' )  # 예측값을 라인그래프로 시각화
plt.show()
plt.close()



r_square = model.score( x,y )
print(r_square)                           # 0.6615877402621955


▩ 위의 키와 체중과의 plot 그래프를 그리고 회귀 직선 그리기

sns.lmplot( x = 'tall', y = 'weight', data = df2, line_kws = {'color':'red'} )



또는

sns.regplot(x,y)




※ 설명 : 직선은 단순회귀 직선이고 분홍색은 신뢰구간입니다.

### 탄닌함유량과 성장률간의 plot 그래프와 회귀직선 그래프를 그리시오!



import pandas 
reg = pd.read_csv("c:\\data\\regression.txt", sep = '\t')

x = reg[['tannin']]         # 독립변수
y = reg[['growth']]        # 종속변수

sns.lmplot( x = 'tannin', y = 'growth', data = reg, line_kws = {'color':'red'} )



또는 

sns.regplot(x,y)




### 책에 있는 데이터인 우주왕복선 챌린저호의 O 형링 파손수를 y 축으로 하고
		   x 축을 온도로해서 plot 그래프 및 회귀직선을 시각화하시오!
		

chall = pd.read_csv("c:\\data\\challenger.csv")

x = chall[['temperature']]
y = chall[['distress_ct']]

sns.lmplot( x = 'temperature', y = 'distress_ct', data = chall, line_kws = {'color':'red'} )

또는 

sns.regplot(x,y)



### 광고비가 매출에 미치는 영향을 알아보기 위해 기존 데이터인 광고비와 매출액에 대한
		  회귀직선을 구하고 광고비를 260,000,000 들었을때 예상되는 매출액이 얼마인지 출력하시오 ! 
		  ( simple_hg.csv ) , 독립변수, 종속변수 둘다 천만원 단위 입니다.

hg = pd.read_csv("c:\\data\\simple_hg.csv")

x = hg[['cost']]         # 독립변수
y = hg[['input']]        # 종속변수

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(x, y)

print('기울기 :', model.coef_ )
print('절편 :',model.intercept_ )

#
기울기 : [[2.18648985]]
절편 : [62.92913386]
매출액 = 2.1864*광고비 + 62.92913

result = model.predict([[26]])    
print(result)                                  # [[119.77786987]] , 11.9억

y_hat = model.predict(x)               # 회귀직선에 넣고 예측한값

import matplotlib.pyplot as plt       # 그래프 그리기위한 모듈
import seaborn as sns

plt.figure( figsize = (10,5) )               # 그래프 사이즈 가로 10, 세로 5
ax1 = sns.distplot( y, hist = False, label = 'y', color = 'red' )          # 실제 값을 라인그래프로 시각화
ax2 = sns.distplot( y_hat, hist= False, label = 'y_hat', ax = ax1, color ='blue' )  # 예측값을 라인그래프로 시각화
plt.show()
plt.close()




r_square = model.score( x,y )
print(r_square)                           # 0.7884035286357817

sns.regplot(x,y)



### ( 마지막 문제 ) 미국 대학교 입학점수 데이터를 가지고 단순회귀 곡선을 그리시오
		    ( 데이터 셋 : sports.csv ,x축 = 학과점수(academic), y축 = 승인점수(acceptance) )

import pandas as pd
sports = pd.read_csv("c:\\data\\sports.csv")

x = sports[['academic']]
y = sports[['acceptance']]

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(x, y)

print('기울기 :', model.coef_ )
print('절편 :',model.intercept_ )

#
기울기 : [[0.17606163]]
절편 : [26.04664277]
승인점수 = 0.176*학과점수 + 26.0466

y_hat = model.predict(x)               # 회귀직선에 넣고 예측한값

import matplotlib.pyplot as plt       # 그래프 그리기위한 모듈
import seaborn as sns

plt.figure( figsize = (10,5) )               # 그래프 사이즈 가로 10, 세로 5
ax1 = sns.distplot( y, hist = False, label = 'y', color = 'red' )          # 실제 값을 라인그래프로 시각화
ax2 = sns.distplot( y_hat, hist= False, label = 'y_hat', ax = ax1, color ='blue' )  # 예측값을 라인그래프로 시각화
plt.show()
plt.close()




r_square = model.score( x,y )
print(r_square)                           # 0.6118750508498951

sns.regplot(x,y) 




